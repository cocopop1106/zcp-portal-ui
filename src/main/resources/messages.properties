# Alert Rule Condition
NodeDown = up{component="node-exporter",job="kubernetes-monitoring-endpoints"}
NodeCPUUsage = (100 - (avg by (instance) (irate(node_cpu{component="node-exporter",mode="idle"}[5m])) * 100))
NodeLoadAverage5 = (node_load5 / count without (cpu, mode) (node_cpu{mode="system"}))
#NodeSwapUsage = (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100)
NodeMemoryUsage = (((node_memory_MemTotal-node_memory_MemFree-node_memory_Buffers-node_memory_Cached)/(node_memory_MemTotal)*100))
NodeLowRootDisk = ((node_filesystem_size{mountpoint="/"} - node_filesystem_free{mountpoint="/"} ) / node_filesystem_size{mountpoint="/"} * 100)
ApiserverDown = up{job="kubernetes-apiservers"}
#APIServerLatencyHigh = rate(apiserver_request_count{code=~"^(?:5..)$"}[5m]) / rate(apiserver_request_count[5m]) * 100
#APIServerErrorsHigh = avg(apiserver_request_latencies_sum / apiserver_request_latencies_count) / 1000000
K8SNodeNotReady = kube_node_status_condition{condition="Ready",status="true"}
#K8SKubeletDown = up{job="kubernetes-nodes"} == 0
#K8SKubeletTooManyPods = kubelet_running_pod_count
#ETCD_Down = up{job="etcd"} == 0
#ETCD_NoLeader = etcd_server_has_leader{job="etcd"} == 0
#ETCD_InsufficientMembers = count(up{job="etcd"} == 0) > (count(up{job="etcd"}) / 2 - 1)
#ETCD_HighNumberOfLeaderChanges = 	increase(etcd_server_leader_changes_seen_total{job="etcd"}[1h])
#PodFrequentlyRestarting = increase(kube_pod_container_status_restarts_total{pod=~"node.*"}[1h])
#PrometheusConfigReloadFailed = Reloading Promehteus' configuration failed
#PrometheusErrorSendingAlerts = Errors while sending alerts
#AlertmanagerFailedReload = alertmanager_config_last_reload_successful == 0
#ZCPMonitoringDown = up{component=~"alertmanager|blackbox-exporter|grafana|kube-state-metrics|prometheus"} == 0
